@inject DemoNotionBlog.Libs.Services.NotionCmsService CmsService
@using System.ServiceModel.Syndication
@using NotionSharp
@implements IDisposable

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">@BlogTitle</a>
</div>

<div>
    <ul class="nav flex-column">
        @foreach (var item in CmsItems)
        {
            var link = "pages/" + DemoNotionBlog.Libs.Services.NotionCmsServiceExtensions.ToLink(item.Title.Text);
            <li class="nav-item px-3">
                <NavLink class="nav-link notion" href="@link">
                    @if (item.AttributeExtensions.TryGetValue(new System.Xml.XmlQualifiedName("iconUrl"), out var iconUrl))
                    {
                        <img class="notion-page-icon" src="@iconUrl"  />
                    }
                    else if (item.AttributeExtensions.TryGetValue(new System.Xml.XmlQualifiedName("iconString"), out var iconString))
                    {
                        <img class="notion-page-emoji" src="@HtmlBlockExtensions.GetTwitterEmojiUrl(iconString)" />
                    }
                    @item.Title.Text
                </NavLink>
            </li>
        }

        @*<li class="nav-item px-3">
            <a class="nav-link" href="https://github.com/softlion/NotionSharp" target="_blank">
                NotionSharp SDK
            </a>
        </li>*@
    </ul>
</div>

@code {
    IDisposable articlesSubscription;

    List<SyndicationItem> CmsItems = new List<SyndicationItem>();
    string BlogTitle = "";


    protected override void OnInitialized()
    {
        base.OnInitialized();
        articlesSubscription = CmsService.CmsArticles.Subscribe(items =>
        {
            if (items != null)
            {
                CmsItems = items;
                BlogTitle = CmsService.CmsTitle ?? "";
                InvokeAsync(() => StateHasChanged());
            }
        });
    }

    public void Dispose()
    {
        articlesSubscription.Dispose();
    }
}
